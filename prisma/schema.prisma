// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  surname   String
  email     String    @unique
  password  String
  active    Boolean   @default(true)
  googleId  String?   @map("google_id")
  provider  String    @default("email") // 'email', 'google', etc.
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // Many-to-many relationship with organizations
  organizations UserOrganization[]

  @@map("users")
}

model Organization {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  shortName  String    @unique @map("short_name")
  parentId   Int?      @map("parent_id")
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  // Self-referencing relationship for hierarchy
  parent   Organization? @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children Organization[] @relation("OrganizationHierarchy")

  // Many-to-many relationship with users
  users UserOrganization[]

  // One-to-many relationship with assistants
  assistants Assistant[]

  @@map("organizations")
}

model UserOrganization {
  userId         Int      @map("user_id")
  organizationId Int      @map("organization_id")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@map("user_organizations")
}

model Assistant {
  id             Int       @id @default(autoincrement())
  organizationId Int       @map("organization_id")
  name           String
  active         Boolean   @default(true)
  status         String    @default("draft") // draft, published
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at")

  // Relationships
  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  details      AssistantDetails?
  tools        AssistantTool[]

  @@unique([organizationId, name])
  @@map("assistants")
}

model AssistantDetails {
  assistantId     Int       @id @map("assistant_id")
  firstMessage    String?   @map("first_message")
  userPrompt      String?   @map("user_prompt")
  systemPrompt    String?   @map("system_prompt")
  interactionMode String?   @map("interaction_mode")
  provider        String?   @default("azure-openai")
  model          String?   @default("gpt-4o-2024-11-20")
  selectedVoice   String?   @map("selected_voice") @default("zephyr")
  temperature     Float?    @default(0.7)
  silenceTimeout  Int?      @map("silence_timeout") @default(30)
  maximumDuration Int?      @map("maximum_duration") @default(600)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @map("updated_at")

  // Relationships
  assistant Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@map("assistant_details")
}

model AssistantTool {
  id          Int      @id @default(autoincrement())
  assistantId Int      @map("assistant_id")
  toolId      String   @map("tool_id")
  toolName    String   @map("tool_name")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  assistant Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@unique([assistantId, toolId])
  @@map("assistant_tools")
} 